// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: product.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (vendor_id, name, price, stock)
VALUES ($1, $2, $3, $4)
RETURNING id, vendor_id, name, price, stock, created_at, updated_at
`

type CreateProductParams struct {
	VendorID int32
	Name     string
	Price    int32
	Stock    int32
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.VendorID,
		arg.Name,
		arg.Price,
		arg.Stock,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.VendorID,
		&i.Name,
		&i.Price,
		&i.Stock,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteProduct, id)
	return err
}

const getProductByID = `-- name: GetProductByID :one
SELECT id, vendor_id, name, price, stock, created_at, updated_at FROM products
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProductByID(ctx context.Context, id int32) (Product, error) {
	row := q.db.QueryRow(ctx, getProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.VendorID,
		&i.Name,
		&i.Price,
		&i.Stock,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProducts = `-- name: GetProducts :many
SELECT
    p.id,
    p.vendor_id,
    p.name AS product_name,
    p.price,
    p.stock,
    u.id AS user_id,
    u.name AS vendor_name
FROM products p
LEFT JOIN users u ON p.vendor_id = u.id
ORDER BY p.id DESC
LIMIT $1 OFFSET $2
`

type GetProductsParams struct {
	Limit  int32
	Offset int32
}

type GetProductsRow struct {
	ID          int32
	VendorID    int32
	ProductName string
	Price       int32
	Stock       int32
	UserID      pgtype.Int4
	VendorName  pgtype.Text
}

func (q *Queries) GetProducts(ctx context.Context, arg GetProductsParams) ([]GetProductsRow, error) {
	rows, err := q.db.Query(ctx, getProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetProductsRow{}
	for rows.Next() {
		var i GetProductsRow
		if err := rows.Scan(
			&i.ID,
			&i.VendorID,
			&i.ProductName,
			&i.Price,
			&i.Stock,
			&i.UserID,
			&i.VendorName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductsByVendorID = `-- name: GetProductsByVendorID :many
SELECT id, vendor_id, name, price, stock, created_at, updated_at FROM products
WHERE vendor_id = $1
ORDER BY id DESC
LIMIT $2 OFFSET $3
`

type GetProductsByVendorIDParams struct {
	VendorID int32
	Limit    int32
	Offset   int32
}

func (q *Queries) GetProductsByVendorID(ctx context.Context, arg GetProductsByVendorIDParams) ([]Product, error) {
	rows, err := q.db.Query(ctx, getProductsByVendorID, arg.VendorID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.VendorID,
			&i.Name,
			&i.Price,
			&i.Stock,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductsWithVendor = `-- name: GetProductsWithVendor :many
SELECT
    p.id,
    p.vendor_id,
    p.name AS product_name,
    p.price,
    p.stock,
    u.id AS user_id,
    u.name AS vendor_name
FROM products p
LEFT JOIN users u ON p.vendor_id = u.id
WHERE
    ($1::text IS NULL OR p.name ILIKE '%' || $1::text || '%')
ORDER BY p.id DESC
LIMIT $2 OFFSET $3
`

type GetProductsWithVendorParams struct {
	Column1 string
	Limit   int32
	Offset  int32
}

type GetProductsWithVendorRow struct {
	ID          int32
	VendorID    int32
	ProductName string
	Price       int32
	Stock       int32
	UserID      pgtype.Int4
	VendorName  pgtype.Text
}

func (q *Queries) GetProductsWithVendor(ctx context.Context, arg GetProductsWithVendorParams) ([]GetProductsWithVendorRow, error) {
	rows, err := q.db.Query(ctx, getProductsWithVendor, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetProductsWithVendorRow{}
	for rows.Next() {
		var i GetProductsWithVendorRow
		if err := rows.Scan(
			&i.ID,
			&i.VendorID,
			&i.ProductName,
			&i.Price,
			&i.Stock,
			&i.UserID,
			&i.VendorName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :exec
UPDATE products
SET name = $2, price = $3, stock = $4
WHERE id = $1
`

type UpdateProductParams struct {
	ID    int32
	Name  string
	Price int32
	Stock int32
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.db.Exec(ctx, updateProduct,
		arg.ID,
		arg.Name,
		arg.Price,
		arg.Stock,
	)
	return err
}
